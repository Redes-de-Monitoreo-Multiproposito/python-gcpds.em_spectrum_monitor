#!wing
#!version=8.0
##################################################################
# Wing project file : User-specific branch                       #
##################################################################
[user attributes]
ai.allow-uploads = True
ai.provider = ('openai_gpt',
               {'currency': '$',
                'key': ('default',
                        None),
                'model': 'gpt-4o',
                'prompt-tok': 0.0,
                'result-tok': 0.0})
ai.refactor-commands = (1,
                        {'Numpy Docstring': ('I have a Python module that needs comprehensive documentation following best practices similar to those used in NumPy. The documentation should include a module-level docstring with a brief overview, key functionalities, and usage examples; function/method docstrings with summaries, detailed descriptions of parameters, return values, exceptions, references to related functions/methods, additional notes, and usage examples in doctest format; and class docstrings if applicable, detailing the class attributes, methods, and important usage notes. Please ensure the documentation is thorough and follows standard conventions. Below is an example module for reference.\n\n\n\n"""Docstring for the example.py module.\n\nModules names should have short, all-lowercase names.  The module name may\nhave underscores if this improves readability.\n\nEvery module should have a docstring at the very top of the file.  The\nmodule\'s docstring may extend over multiple lines.  If your docstring does\nextend over multiple lines, the closing three quotation marks must be on\na line by itself, preferably preceded by a blank line.\n\n"""\n\nimport os  # standard library imports first\n\n# Do NOT import using *, e.g. from numpy import *\n#\n# Import the module using\n#\n#   import numpy\n#\n# instead or import individual functions as needed, e.g\n#\n#  from numpy import array, zeros\n#\n# If you prefer the use of abbreviated module names, we suggest the\n# convention used by NumPy itself::\n\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n\n# These abbreviated names are not to be used in docstrings; users must\n# be able to paste and execute docstrings after importing only the\n# numpy module itself, unabbreviated.\n\n\ndef foo(var1, var2, *args, long_var_name="hi", only_seldom_used_keyword=0, **kwargs):\n    r"""Summarize the function in one line.\n\n    Several sentences providing an extended description. Refer to\n    variables using back-ticks, e.g. `var`.\n\n    Parameters\n    ----------\n    var1 : array_like\n        Array_like means all those objects -- lists, nested lists, etc. --\n        that can be converted to an array.  We can also refer to\n        variables like `var1`.\n    var2 : int\n        The type above can either refer to an actual Python type\n        (e.g. ``int``), or describe the type of the variable in more\n        detail, e.g. ``(N,) ndarray`` or ``array_like``.\n    *args : iterable\n        Other arguments.\n    long_var_name : {\'hi\', \'ho\'}, optional\n        Choices in brackets, default first when optional.\n\n    Returns\n    -------\n    type\n        Explanation of anonymous return value of type ``type``.\n    describe : type\n        Explanation of return value named `describe`.\n    out : type\n        Explanation of `out`.\n    type_without_description\n\n    Other Parameters\n    ----------------\n    only_seldom_used_keyword : int, optional\n        Infrequently used parameters can be described under this optional\n        section to prevent cluttering the Parameters section.\n    **kwargs : dict\n        Other infrequently used keyword arguments. Note that all keyword\n        arguments appearing after the first parameter specified under the\n        Other Parameters section, should also be described under this\n        section.\n\n    Raises\n    ------\n    BadException\n        Because you shouldn\'t have done that.\n\n    See Also\n    --------\n    numpy.array : Relationship (optional).\n    numpy.ndarray : Relationship (optional), which could be fairly long, in\n                    which case the line wraps here.\n    numpy.dot, numpy.linalg.norm, numpy.eye\n\n    Notes\n    -----\n    Notes about the implementation algorithm (if needed).\n\n    This can have multiple paragraphs.\n\n    You may include some math:\n\n    .. math:: X(e^{j\\omega } ) = x(n)e^{ - j\\omega n}\n\n    And even use a Greek symbol like :math:`\\omega` inline.\n\n    References\n    ----------\n    Cite the relevant literature, e.g. [1]_.  You may also cite these\n    references in the notes section above.\n\n    .. [1] O. McNoleg, "The integration of GIS, remote sensing,\n       expert systems and adaptive co-kriging for environmental habitat\n       modelling of the Highland Haggis using object-oriented, fuzzy-logic\n       and neural-network techniques," Computers & Geosciences, vol. 22,\n       pp. 585-588, 1996.\n\n    Examples\n    --------\n    These are written in doctest format, and should illustrate how to\n    use the function.\n\n    >>> a = [1, 2, 3]\n    >>> print([x + 3 for x in a])\n    [4, 5, 6]\n    >>> print("a\\nb")\n    a\n    b\n    """\n    # After closing class docstring, there should be one blank line to\n    # separate following codes (according to PEP257).\n    # But for function, method and module, there should be no blank lines\n    # after closing the docstring.',
        {'auto-context': 0}),
                         'def': ('I want you to add type hints and typing to my code. I do NOT want you to complete the code or add docstrings. Do not add typing to the arguments self or cls. Do not change the names of functions, methods, or arguments.',
                                 {'auto-context': 0})})
ai.request-history = ['Quiero que este modulo Ãºnicamente se use para procesar datos de tipo fase (I) y cuadratura (Q), provenientes de un SDR. ',
                      'I want you to add type hints and typing to my code. I do NOT want you to complete the code or add docstrings. Do not add typing to the arguments self or cls. Do not change the names of functions, methods, or arguments.']
cache.last-mime-type = {loc('gcpds/em_spectrum_monitor/detection.py'): 'text/x-python',
                        loc('gcpds/em_spectrum_monitor/monitor.py'): 'text/x-python',
                        loc('gcpds/em_spectrum_monitor/processing.py'): 'text/x-python',
                        loc('gcpds/em_spectrum_monitor/utils/stations.py'): 'text/x-python'}
guimgr.overall-gui-state = {'windowing-policy': 'combined-window',
                            'windows': [{'name': 'a9Agz9LUGc8XRR7DzyDvZ0wWCnNQ2g7A',
        'size-state': 'maximized',
        'type': 'dock',
        'view': {'area': 'tall',
                 'constraint': None,
                 'current_pages': [0,
                                   0],
                 'full-screen': False,
                 'notebook_display': 'normal',
                 'notebook_percent': 0.3475991649269311,
                 'override_title': None,
                 'pagelist': [('project',
                               'tall',
                               0,
                               {'tree-state': {'file-sort-method': 'by name',
        'list-files-first': False,
        'tree-states': {'deep': {'expanded-nodes': [(0,),
        (1,),
        (1,
         0),
        (1,
         0,
         0),
        (5,)],
                                 'selected-nodes': [(1,
        0,
        0,
        2)],
                                 'top-node': (0,)}},
        'tree-style': 'deep'}}),
                              ('browser',
                               'tall',
                               0,
                               {}),
                              ('snippets',
                               'tall',
                               0,
                               {'tree-states': {'__all__': [],
        'c': [],
        'django': [],
        'html': [],
        'py': []}}),
                              ('refactoring',
                               'tall',
                               0,
                               {}),
                              ('ai',
                               'tall',
                               1,
                               {'auto-context': 0,
                                'chat-auto-context': 0,
                                'chat-enter-executes': 1,
                                'chat-target': 'selection',
                                'current-page': 0,
                                'enter-executes': False,
                                'replace-mode': 'replace',
                                'request': '',
                                'show-console': False,
                                'target': 'selection'}),
                              ('source-assistant',
                               'tall',
                               2,
                               {}),
                              ('debug-stack',
                               'tall',
                               1,
                               {'codeline-mode': 'below'}),
                              ('indent',
                               'tall',
                               2,
                               {})],
                 'primary_view_state': {'area': 'wide',
        'constraint': None,
        'current_pages': [7,
                          0],
        'notebook_display': 'normal',
        'notebook_percent': 0.30000000000000004,
        'override_title': None,
        'pagelist': [('batch-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': 'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 42,
                                       'fReplaceText': '',
                                       'fReverse': False,
                                       'fSearchText': '',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': False},
                       'replace-entry-expanded': False,
                       'search-entry-expanded': False}),
                     ('interactive-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': 'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 42,
                                       'fReplaceText': '\\\\',
                                       'fReverse': True,
                                       'fSearchText': '\\',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': True}}),
                     ('debug-data',
                      'wide',
                      0,
                      {}),
                     ('debug-breakpoints',
                      'wide',
                      0,
                      {'tree-state': []}),
                     ('testing',
                      'wide',
                      0,
                      {'added-files': [],
                       'filter': '',
                       'recent-filters': None,
                       'sort-order': 'alpha',
                       'tree-state': {'expanded-nodes': [],
                                      'selected-nodes': [],
                                      'top-node': (0,)}}),
                     ('debug-exceptions',
                      'wide',
                      0,
                      {}),
                     ('debug-io',
                      'wide',
                      0,
                      {}),
                     ('versioncontrol.git',
                      'wide',
                      0,
                      {}),
                     ('debug-probe',
                      'wide',
                      2,
                      {'active-range': (None,
        -1,
        -1),
                       'attrib-starts': [],
                       'code-line': '',
                       'first-line': 0,
                       'folded-linenos': [],
                       'history': {},
                       'launch-id': None,
                       'sel-line': 0,
                       'sel-line-start': 0,
                       'selection_end': 0,
                       'selection_start': 0,
                       'zoom': 0}),
                     ('debug-watch',
                      'wide',
                      1,
                      {}),
                     ('debug-modules',
                      'wide',
                      1,
                      {}),
                     ('python-shell',
                      'wide',
                      2,
                      {'active-range': (None,
        -1,
        -1),
                       'attrib-starts': [],
                       'code-line': '',
                       'first-line': 0,
                       'folded-linenos': [],
                       'history': {},
                       'launch-id': None,
                       'sel-line': 2,
                       'sel-line-start': 137,
                       'selection_end': 137,
                       'selection_start': 137,
                       'zoom': 0}),
                     ('bookmarks',
                      'wide',
                      1,
                      {}),
                     ('messages',
                      'wide',
                      2,
                      {}),
                     ('os-command',
                      'wide',
                      1,
                      {'last-percent': 0.8,
                       'toolbox-percent': 1.0,
                       'toolbox-tree-sel': ''})],
        'primary_view_state': {'editor_states': ({'bookmarks': ([[loc('gcpds/em_spectrum_monitor/monitor.py'),
        {'attrib-starts': [('scanning|0|',
                            6),
                           ('scanning|0|.wide_scan|0|',
                            45)],
         'code-line': '\n',
         'first-line': 32,
         'folded-linenos': [],
         'sel-line': 59,
         'sel-line-start': 2282,
         'selection_end': 2282,
         'selection_start': 2282,
         'zoom': 0},
        1719927264.3507915],
        [loc('gcpds/em_spectrum_monitor/processing.py'),
         {'attrib-starts': [('Processing|0|',
                             3)],
          'code-line': '    def wavelet(self, signal: complex) -> None:\n',
          'first-line': 52,
          'folded-linenos': [],
          'sel-line': 87,
          'sel-line-start': 3004,
          'selection_end': 3066,
          'selection_start': 3004,
          'zoom': 0},
         1719927957.88844],
        [loc('gcpds/em_spectrum_monitor/processing.py'),
         {'attrib-starts': [('Processing|0|',
                             3),
                            ('Processing|0|.wavelet|0|',
                             87)],
          'code-line': '        """\n',
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 88,
          'sel-line-start': 3049,
          'selection_end': 3060,
          'selection_start': 3060,
          'zoom': 0},
         1719928018.2339194],
        [loc('gcpds/em_spectrum_monitor/utils/stations.py'),
         {'attrib-starts': [('stations|0|',
                             4)],
          'code-line': '    ----------\n',
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 8,
          'sel-line-start': 326,
          'selection_end': 340,
          'selection_start': 340,
          'zoom': 0},
         1719928026.4792652],
        [loc('gcpds/em_spectrum_monitor/processing.py'),
         {'attrib-starts': [('Processing|0|',
                             3),
                            ('Processing|0|.wavelet|0|',
                             87)],
          'code-line': '        """\n',
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 88,
          'sel-line-start': 3049,
          'selection_end': 3060,
          'selection_start': 3060,
          'zoom': 0},
         1719928028.7107422],
        [loc('gcpds/em_spectrum_monitor/utils/stations.py'),
         {'attrib-starts': [('stations|0|',
                             4)],
          'code-line': '    ----------\n',
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 8,
          'sel-line-start': 326,
          'selection_end': 340,
          'selection_start': 340,
          'zoom': 0},
         1719928030.3150516],
        [loc('gcpds/em_spectrum_monitor/processing.py'),
         {'attrib-starts': [('Processing|0|',
                             3),
                            ('Processing|0|.fft|0|',
                             10)],
          'code-line': '        \n',
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 21,
          'sel-line-start': 753,
          'selection_end': 761,
          'selection_start': 761,
          'zoom': 0},
         1719928040.8030202],
        [loc('gcpds/em_spectrum_monitor/utils/stations.py'),
         {'attrib-starts': [('stations|0|',
                             4)],
          'code-line': '    ----------\n',
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 8,
          'sel-line-start': 326,
          'selection_end': 340,
          'selection_start': 340,
          'zoom': 0},
         1719928042.1607773],
        [loc('gcpds/em_spectrum_monitor/processing.py'),
         {'attrib-starts': [('Processing|0|',
                             3)],
          'code-line': '    def multi_taper(self, signal: complex) -> numpy.ndarray:\n',
          'first-line': 42,
          'folded-linenos': [],
          'sel-line': 70,
          'sel-line-start': 2224,
          'selection_end': 2228,
          'selection_start': 2228,
          'zoom': 0},
         1719928170.9788213],
        [loc('gcpds/em_spectrum_monitor/processing.py'),
         {'attrib-starts': [('Processing|0|',
                             3)],
          'code-line': '    def multi_taper(self, signal: complex) -> numpy.ndarray:\n',
          'first-line': 49,
          'folded-linenos': [],
          'sel-line': 70,
          'sel-line-start': 2221,
          'selection_end': 2281,
          'selection_start': 2281,
          'zoom': 0},
         1719928204.9700935],
        [loc('gcpds/em_spectrum_monitor/processing.py'),
         {'attrib-starts': [('Processing|0|',
                             3),
                            ('Processing|0|.welch|0|',
                             39)],
          'code-line': '        -------\n',
          'first-line': 33,
          'folded-linenos': [],
          'sel-line': 51,
          'sel-line-start': 1675,
          'selection_end': 1690,
          'selection_start': 1690,
          'zoom': 0},
         1719928267.098547],
        [loc('gcpds/em_spectrum_monitor/processing.py'),
         {'attrib-starts': [('Processing|0|',
                             3)],
          'code-line': '    def wavelet(self, signal: complex) -> np.ndarray:\n',
          'first-line': 93,
          'folded-linenos': [],
          'sel-line': 102,
          'sel-line-start': 3402,
          'selection_end': 3445,
          'selection_start': 3445,
          'zoom': 0},
         1719928273.0603487],
        [loc('gcpds/em_spectrum_monitor/processing.py'),
         {'attrib-starts': [('Processing|0|',
                             3)],
          'code-line': '    Multi-taper method, and Wavelet transform.\n',
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 7,
          'sel-line-start': 258,
          'selection_end': 304,
          'selection_start': 304,
          'zoom': 0},
         1719931736.8186617],
        [loc('gcpds/em_spectrum_monitor/monitor.py'),
         {'attrib-starts': [('scanning|0|',
                             6),
                            ('scanning|0|.__init__|0|',
                             10)],
          'code-line': '        self.hackrf = HackRF()\n',
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 12,
          'sel-line-start': 413,
          'selection_end': 443,
          'selection_start': 443,
          'zoom': 0},
         1719932650.228205],
        [loc('gcpds/em_spectrum_monitor/utils/stations.py'),
         {'attrib-starts': [('Stations|0|',
                             6),
                            ('Stations|0|.find_nearest_stations|0|',
                             35)],
          'code-line': '\n',
          'first-line': 22,
          'folded-linenos': [],
          'sel-line': 53,
          'sel-line-start': 1827,
          'selection_end': 1827,
          'selection_start': 1827,
          'zoom': 0},
         1719933100.7168384],
        [loc('gcpds/em_spectrum_monitor/utils/xml-propertyvalue-754348.xml'),
         {'attrib-starts': [],
          'code-line': '<?xml version="1.0" encoding="UTF-8"?><radioemisoras><radioemisora><nombre>W RADIO</nombre><organizacion>CARACOL PRIMERA CADENA RADIAL COLOMBIANA S.A.</organizacion><location ntg-pvid="714005">CERETÃ</location><concesionario>CARACOL PRIMERA CADENA RADIAL COLOMBIANA S.A.</concesionario><codigo>52147</codigo><frecuencia>107.5 MHz</frecuencia><distintivo>HJA21</distintivo><tecnologia>FM</tecnologia><clase_programa>COMERCIAL</clase_programa><clase_ptnrs>C</clase_ptnrs><clase_area>ZONAL  </clase_area><clase_gestion>INDIRECTA</clase_gestion><servicio>CERETÃ, MONTERÃA, SAN CARLOS, SAN PELAYO</servicio><latlong ntg-pvid="731729">8.8451833,-75.8252611</latlong><departamento>CÃRDOBA</departamento></radioemisora><radioemisora><nombre>ANTENA STEREO</nombre><organizacion>CORPORACIÃN COMUNICAR</organizacion><location ntg-pvid="713576">APARTADÃ</location><concesionario>CORPORACIÃN COMUNICAR</concesionario><codigo>52197</codigo><frecuencia>107.4 MHz</frecuencia><distintivo>HKA40</distintivo><tecnologia>FM</tecnologia><clase_',
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 0,
          'sel-line-start': 0,
          'selection_end': 0,
          'selection_start': 0,
          'zoom': 0},
         1719933101.1595263],
        [loc('gcpds/em_spectrum_monitor/utils/stations.py'),
         {'attrib-starts': [('Stations|0|',
                             6),
                            ('Stations|0|.find_nearest_stations|0|',
                             35)],
          'code-line': '\n',
          'first-line': 22,
          'folded-linenos': [],
          'sel-line': 53,
          'sel-line-start': 1827,
          'selection_end': 1827,
          'selection_start': 1827,
          'zoom': 0},
         1719933103.364115],
        [loc('gcpds/em_spectrum_monitor/utils/__init__.py'),
         {'attrib-starts': [],
          'code-line': 'from .stations import Stations\n',
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 0,
          'sel-line-start': 0,
          'selection_end': 30,
          'selection_start': 22,
          'zoom': 0},
         1719933327.8088205],
        [loc('gcpds/em_spectrum_monitor/utils/stations.py'),
         {'attrib-starts': [('Stations|0|',
                             6)],
          'code-line': '    def find_nearest_stations(self, lat: float, lon: float, n: int = 5) -> List[dict]:\n',
          'first-line': 6,
          'folded-linenos': [],
          'sel-line': 35,
          'sel-line-start': 1204,
          'selection_end': 1305,
          'selection_start': 1204,
          'zoom': 0},
         1719933405.5205574],
        [loc('gcpds/em_spectrum_monitor/utils/stations.py'),
         {'attrib-starts': [('Stations|0|',
                             6),
                            ('Stations|0|.find_nearest_stations|0|',
                             35)],
          'code-line': "                - 'distance'\n",
          'first-line': 53,
          'folded-linenos': [],
          'sel-line': 69,
          'sel-line-start': 2458,
          'selection_end': 2486,
          'selection_start': 2486,
          'zoom': 0},
         1719933412.4461014]],
        20),
        'current-loc': loc('gcpds/em_spectrum_monitor/utils/stations.py'),
        'editor-state-list': [(loc('gcpds/em_spectrum_monitor/processing.py'),
                               {'attrib-starts': [('Processing|0|',
        3)],
                                'code-line': '    Multi-taper method, and Wavelet transform.\n',
                                'first-line': 0,
                                'folded-linenos': [],
                                'sel-line': 7,
                                'sel-line-start': 258,
                                'selection_end': 304,
                                'selection_start': 304,
                                'zoom': 0}),
                              (loc('gcpds/em_spectrum_monitor/monitor.py'),
                               {'attrib-starts': [('scanning|0|',
        6),
        ('scanning|0|.__init__|0|',
         10)],
                                'code-line': '        self.hackrf = HackRF()\n',
                                'first-line': 0,
                                'folded-linenos': [],
                                'sel-line': 12,
                                'sel-line-start': 413,
                                'selection_end': 443,
                                'selection_start': 443,
                                'zoom': 0}),
                              (loc('gcpds/em_spectrum_monitor/utils/stations.py'),
                               {'attrib-starts': [],
                                'code-line': '\n',
                                'first-line': 0,
                                'folded-linenos': [],
                                'sel-line': 3,
                                'sel-line-start': 107,
                                'selection_end': 107,
                                'selection_start': 107,
                                'zoom': 0}),
                              (loc('gcpds/em_spectrum_monitor/utils/xml-propertyvalue-754348.xml'),
                               {'attrib-starts': [],
                                'code-line': '<?xml version="1.0" encoding="UTF-8"?><radioemisoras><radioemisora><nombre>W RADIO</nombre><organizacion>CARACOL PRIMERA CADENA RADIAL COLOMBIANA S.A.</organizacion><location ntg-pvid="714005">CERETÃ</location><concesionario>CARACOL PRIMERA CADENA RADIAL COLOMBIANA S.A.</concesionario><codigo>52147</codigo><frecuencia>107.5 MHz</frecuencia><distintivo>HJA21</distintivo><tecnologia>FM</tecnologia><clase_programa>COMERCIAL</clase_programa><clase_ptnrs>C</clase_ptnrs><clase_area>ZONAL  </clase_area><clase_gestion>INDIRECTA</clase_gestion><servicio>CERETÃ, MONTERÃA, SAN CARLOS, SAN PELAYO</servicio><latlong ntg-pvid="731729">8.8451833,-75.8252611</latlong><departamento>CÃRDOBA</departamento></radioemisora><radioemisora><nombre>ANTENA STEREO</nombre><organizacion>CORPORACIÃN COMUNICAR</organizacion><location ntg-pvid="713576">APARTADÃ</location><concesionario>CORPORACIÃN COMUNICAR</concesionario><codigo>52197</codigo><frecuencia>107.4 MHz</frecuencia><distintivo>HKA40</distintivo><tecnologia>FM</tecnologia><clase_',
                                'first-line': 0,
                                'folded-linenos': [],
                                'sel-line': 0,
                                'sel-line-start': 0,
                                'selection_end': 0,
                                'selection_start': 0,
                                'zoom': 0}),
                              (loc('gcpds/em_spectrum_monitor/utils/__init__.py'),
                               {'attrib-starts': [],
                                'code-line': 'from .stations import Stations\n',
                                'first-line': 0,
                                'folded-linenos': [],
                                'sel-line': 0,
                                'sel-line-start': 0,
                                'selection_end': 30,
                                'selection_start': 22,
                                'zoom': 0})],
        'has-focus': False,
        'locked': False},
        [loc('gcpds/em_spectrum_monitor/processing.py'),
         loc('gcpds/em_spectrum_monitor/monitor.py'),
         loc('gcpds/em_spectrum_monitor/utils/stations.py'),
         loc('gcpds/em_spectrum_monitor/utils/xml-propertyvalue-754348.xml'),
         loc('gcpds/em_spectrum_monitor/utils/__init__.py')]),
                               'open_files': ['gcpds/em_spectrum_monitor/processing.py',
        'gcpds/em_spectrum_monitor/monitor.py',
        'gcpds/em_spectrum_monitor/utils/xml-propertyvalue-754348.xml',
        'gcpds/em_spectrum_monitor/utils/__init__.py',
        'gcpds/em_spectrum_monitor/utils/stations.py']},
        'saved_notebook_display': None,
        'split_percents': {0: 0.9225401256106072},
        'splits': 2,
        'tab_location': 'top',
        'traversal_pos': ((0,
                           7),
                          1719933791.4972172),
        'user_data': {}},
                 'saved_notebook_display': None,
                 'split_percents': {0: 0.8557483731019523},
                 'splits': 2,
                 'tab_location': 'left',
                 'traversal_pos': ((1,
                                    0),
                                   1719927802.8316562),
                 'user_data': {}},
        'window-alloc': (307,
                         1381,
                         1280,
                         690)}]}
guimgr.recent-documents = [loc('gcpds/em_spectrum_monitor/utils/stations.py'),
                           loc('gcpds/em_spectrum_monitor/utils/__init__.py'),
                           loc('gcpds/em_spectrum_monitor/utils/xml-propertyvalue-754348.xml'),
                           loc('gcpds/em_spectrum_monitor/monitor.py'),
                           loc('gcpds/em_spectrum_monitor/processing.py')]
guimgr.visual-state = {loc('../../../../.wingpro10/updates/from_10.0.2.0/10.0.4.3/plugins/ai/_openai_chat.py'): {'attrib-starts': [],
        'code-line': '',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0,
        'zoom': 0},
                       loc('../../../../.wingpro10/updates/from_10.0.2.0/10.0.4.3/plugins/ai/_openai_completion.py'): {'attrib-starts': [],
        'code-line': '',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0,
        'zoom': 0},
                       loc('../../../../.wingpro10/updates/from_10.0.2.0/10.0.4.3/plugins/ai/_openai_installer.py'): {'attrib-starts': [],
        'code-line': '',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0,
        'zoom': 0},
                       loc('../../../../.wingpro10/updates/from_10.0.2.0/10.0.4.3/plugins/ai/openai_gpt.py'): {'attrib-starts': [],
        'code-line': '',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0,
        'zoom': 0},
                       loc('../../../.wingpro10/openai.key'): {'attrib-starts': [],
        'code-line': '',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 1,
        'sel-line-start': 52,
        'selection_end': 52,
        'selection_start': 52,
        'zoom': 0},
                       loc('MANIFEST.in'): {'attrib-starts': [],
        'code-line': 'recursive-include gcpds/ *\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 23,
        'selection_start': 23,
        'zoom': 0},
                       loc('docs/source/conf.py'): {'attrib-starts': [],
        'code-line': "# autodoc_typehints = 'none'  # Do not show typehints\n",
        'first-line': 69,
        'folded-linenos': [],
        'sel-line': 82,
        'sel-line-start': 3854,
        'selection_end': 3907,
        'selection_start': 3907,
        'zoom': 0},
                       loc('gcpds/em_spectrum_monitor/__init__.py'): {'attrib-starts': [],
        'code-line': ' \n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0,
        'zoom': 0},
                       loc('gcpds/em_spectrum_monitor/detection.py'): {'attrib-starts': [],
        'code-line': '########################################################################\n',
        'first-line': 10,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0,
        'zoom': 0},
                       loc('gcpds/em_spectrum_monitor/monitor.py'): {'attrib-starts': [('scanning|0|',
        6),
        ('scanning|0|.wide_scan|0|',
         45)],
        'code-line': '\n',
        'first-line': 32,
        'folded-linenos': [],
        'sel-line': 59,
        'sel-line-start': 2282,
        'selection_end': 2282,
        'selection_start': 2282,
        'zoom': 0},
                       loc('gcpds/em_spectrum_monitor/processing.py'): {'attrib-starts': [('Processing|0|',
        3)],
        'code-line': '    Multi-taper method, and Wavelet transform.\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 7,
        'sel-line-start': 258,
        'selection_end': 304,
        'selection_start': 304,
        'zoom': 0},
                       loc('gcpds/em_spectrum_monitor/utils/stations.py'): {'attrib-starts': [('stations|0|',
        4)],
        'code-line': '    ----------\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 8,
        'sel-line-start': 326,
        'selection_end': 340,
        'selection_start': 340,
        'zoom': 0},
                       loc('pyproject.toml'): {'attrib-starts': [],
        'code-line': '    "pyhackrf2",\n',
        'first-line': 6,
        'folded-linenos': [],
        'sel-line': 40,
        'sel-line-start': 1086,
        'selection_end': 1102,
        'selection_start': 1102,
        'zoom': 0},
                       loc('references/channels-534_radioemisoras.xlsx'): {'attrib-starts': [],
        'code-line': 'PK\x03\x04\x14\x00\x06\x00\x08\x00\x00\x00!\x00z\x01Ã«B\x18\x02\x00\x00\x0f\x0b\x00\x00\x13\x00\x08\x02[Content_Types].xml Â¢\x04\x02(\xa0\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00ÃVÃnÃ0\x0cÂ½\x0fÃ?\x18Âº\x16Â±Ã\x1e\x86a\x88ÃCÂ¶ÃÂ¶\x15hÃ¶\x01\x8aÃÃBdI\x90Ã4Ã¹Ã»Q\x8aÃ\x06\x83\x1b5\x8d\x8b^b96Ã{|\x12iNnÂ·\xad.6Ã \x83Â²Â¦bÃÃ¥\x98\x15`j+\x95YUÃ¬Ã¯Ã¼Ã§Ã¨++\x02\n',
        'first-line': 0,
        'folded-linenos': [],
        'sel-line': 0,
        'sel-line-start': 0,
        'selection_end': 0,
        'selection_start': 0,
        'zoom': 0}}
testing.stored-results = (1,
                          [],
                          {})
versioncontrol.git.remote-history = ['git@github.com:Redes-de-Monitoreo-Multiproposito/python-gcpds.em_spectrum_monitor.git']
